
Micro benchmarks

-- Base --

package main
func main() { }

-- ForEmpty --

package main
func main() {
	for i := 0; i < 400; i++ { }
}

-- Assignment --

package main
func main() {
	for i := 0; i < 100; i++ {
		var x int = 1
		var y = x
		var z []int = nil
		var t = "t"
		var s = t
		var q interface{} = t
		x = y
		q = t
		_ = y
		_ = z
		_ = s
		_ = t
		_ = q
	}
}

-- Call --

package main
func main() {
	for i := 0; i < 100; i++ {
		a := f(1)
		a = f(2)
		a = f(3)
		a = f(4)
		a = f(5)
		_ = a
	}
}
func f(x int) int {
	return x + 1
}

-- CallIndirect --

package main
func main() {
	f := func(x int) int {
		return x
	}
	for i := 0; i < 300; i++ {
		_ = f(i)
	}
}

-- Closure --

package main
func main() {
	var b int
	f := func(x int) {
		b = x
	}
	for i := 0; i < 300; i++ {
		f(i)
	}
	_ = b
}


-- CallWithFinalizer --

package main
func main() {
	for i := 0; i < 100; i++ {
		_, _ = f()
	}
}
func f() (x int, y string) {
	func() {
		x = 0
		y = ""
	}()
	return
}

-- Defer --

package main
func main() {
	for i := 0; i < 100; i++ {
		defer func(x int) {
			_ = x
		}(i)
	}
}

-- ForRange --

package main
func main() {
	var s = []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
	for i := 0; i < 200; i++ {
		for i, x := range s {
			_ = i
			_ = x
		}
	}
}

-- FloatToIntConversion --

package main
func main() {
	b := 1.0
	for i := 0; i < 400; i++ {
		_ = int(b)
		_ = int8(b)
		_ = uint(b)
		_ = int64(b)
	}
}

-- IntToFloatConversion --

package main
func main() {
	var a int = 1
	var b uint16 = 1
	for i := 0; i < 400; i++ {
		_ = float32(a)
		_ = float64(b)
		_ = float32(a)
		_ = float64(b)
	}
}

-- TypeAssertion --

package main
func main() {
	var a interface{} = ""
	var v1 int
	var v2 string
	var v3 []int
	var ok bool
	for i := 0; i < 100; i++ {
		v1, ok = a.(int)
		v2, ok = a.(string)
		v3, ok = a.([]int)
	}
	_ = v1
	_ = v2
	_ = v3
	_ = ok
}

-- If --

package main
func main() {
	s := "ab"
	a := true
	b := false
	x := 0
	for i := 0; i < 150; i++ {
		if i == 0 {
			x = 0
		} else if i < 2 {
			x = 0
		} else if i > 10000 {
			x = 0
		} else if i <= 2 {
			x = 0
		} else if x >= 10000 {
			x = 0
		} else if len(s) == 0 {
			x = 0
		} else if len(s) != 2 {
			x = 0
		} else if len(s) > 100 {
			x = 0
		} else if len(s) < 2 {
			x = 0
		} else if len(s) >= 100 {
			x = 0
		} else if len(s) <= 1 {
			x = 0
		} else if b {
			x = 0
		} else if !a {
			x = 0
		} else {
			x = 1
		}
	}
}

-- Switch --

package main
func main() {
	for i := 0; i < 150; i++ {
		switch x := i; x {
		case 34, 21, 18:
			_ = x
		case 81, 49:
			_ = x
		case 11:
			_ = x
		case 93, 62, 68, 15:
			_ = x
		case 8:
			_ = x
		case 51, 87:
			_ = x
		case 16, 77, 65:
			_ = x
		case 83:
			_ = x
		case 61, 20, 52:
			_ = x
		default:
			_ = x
		}
	}
}
