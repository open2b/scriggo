// Go version: go1.11.5

package os

import original "os"
import "scrigo"
import "reflect"

var Package = scrigo.Package{
	"Args": &original.Args,
	"Chdir": original.Chdir,
	"Chmod": original.Chmod,
	"Chown": original.Chown,
	"Chtimes": original.Chtimes,
	"Clearenv": original.Clearenv,
	"Create": original.Create,
	"DevNull": scrigo.Constant(original.DevNull, nil),
	"Environ": original.Environ,
	"ErrClosed": &original.ErrClosed,
	"ErrExist": &original.ErrExist,
	"ErrInvalid": &original.ErrInvalid,
	"ErrNoDeadline": &original.ErrNoDeadline,
	"ErrNotExist": &original.ErrNotExist,
	"ErrPermission": &original.ErrPermission,
	"Executable": original.Executable,
	"Exit": original.Exit,
	"Expand": original.Expand,
	"ExpandEnv": original.ExpandEnv,
	"File": reflect.TypeOf(original.File{}),
	"FileInfo": reflect.TypeOf((*original.FileInfo)(nil)).Elem(),
	"FileMode": reflect.TypeOf(original.FileMode(uint32(0))),
	"FindProcess": original.FindProcess,
	"Getegid": original.Getegid,
	"Getenv": original.Getenv,
	"Geteuid": original.Geteuid,
	"Getgid": original.Getgid,
	"Getgroups": original.Getgroups,
	"Getpagesize": original.Getpagesize,
	"Getpid": original.Getpid,
	"Getppid": original.Getppid,
	"Getuid": original.Getuid,
	"Getwd": original.Getwd,
	"Hostname": original.Hostname,
	"Interrupt": &original.Interrupt,
	"IsExist": original.IsExist,
	"IsNotExist": original.IsNotExist,
	"IsPathSeparator": original.IsPathSeparator,
	"IsPermission": original.IsPermission,
	"IsTimeout": original.IsTimeout,
	"Kill": &original.Kill,
	"Lchown": original.Lchown,
	"Link": original.Link,
	"LinkError": reflect.TypeOf(original.LinkError{}),
	"LookupEnv": original.LookupEnv,
	"Lstat": original.Lstat,
	"Mkdir": original.Mkdir,
	"MkdirAll": original.MkdirAll,
	"ModeAppend": scrigo.Constant(original.ModeAppend, nil),
	"ModeCharDevice": scrigo.Constant(original.ModeCharDevice, nil),
	"ModeDevice": scrigo.Constant(original.ModeDevice, nil),
	"ModeDir": scrigo.Constant(original.ModeDir, nil),
	"ModeExclusive": scrigo.Constant(original.ModeExclusive, nil),
	"ModeIrregular": scrigo.Constant(original.ModeIrregular, nil),
	"ModeNamedPipe": scrigo.Constant(original.ModeNamedPipe, nil),
	"ModePerm": scrigo.Constant(original.ModePerm, nil),
	"ModeSetgid": scrigo.Constant(original.ModeSetgid, nil),
	"ModeSetuid": scrigo.Constant(original.ModeSetuid, nil),
	"ModeSocket": scrigo.Constant(original.ModeSocket, nil),
	"ModeSticky": scrigo.Constant(original.ModeSticky, nil),
	"ModeSymlink": scrigo.Constant(original.ModeSymlink, nil),
	"ModeTemporary": scrigo.Constant(original.ModeTemporary, nil),
	"ModeType": scrigo.Constant(original.ModeType, nil),
	"NewFile": original.NewFile,
	"NewSyscallError": original.NewSyscallError,
	"O_APPEND": scrigo.Constant(original.O_APPEND, nil),
	"O_CREATE": scrigo.Constant(original.O_CREATE, nil),
	"O_EXCL": scrigo.Constant(original.O_EXCL, nil),
	"O_RDONLY": scrigo.Constant(original.O_RDONLY, nil),
	"O_RDWR": scrigo.Constant(original.O_RDWR, nil),
	"O_SYNC": scrigo.Constant(original.O_SYNC, nil),
	"O_TRUNC": scrigo.Constant(original.O_TRUNC, nil),
	"O_WRONLY": scrigo.Constant(original.O_WRONLY, nil),
	"Open": original.Open,
	"OpenFile": original.OpenFile,
	"PathError": reflect.TypeOf(original.PathError{}),
	"PathListSeparator": scrigo.Constant(original.PathListSeparator, nil),
	"PathSeparator": scrigo.Constant(original.PathSeparator, nil),
	"Pipe": original.Pipe,
	"ProcAttr": reflect.TypeOf(original.ProcAttr{}),
	"Process": reflect.TypeOf(original.Process{}),
	"ProcessState": reflect.TypeOf(original.ProcessState{}),
	"Readlink": original.Readlink,
	"Remove": original.Remove,
	"RemoveAll": original.RemoveAll,
	"Rename": original.Rename,
	"SEEK_CUR": scrigo.Constant(original.SEEK_CUR, nil),
	"SEEK_END": scrigo.Constant(original.SEEK_END, nil),
	"SEEK_SET": scrigo.Constant(original.SEEK_SET, nil),
	"SameFile": original.SameFile,
	"Setenv": original.Setenv,
	"Signal": reflect.TypeOf((*original.Signal)(nil)).Elem(),
	"StartProcess": original.StartProcess,
	"Stat": original.Stat,
	"Stderr": &original.Stderr,
	"Stdin": &original.Stdin,
	"Stdout": &original.Stdout,
	"Symlink": original.Symlink,
	"SyscallError": reflect.TypeOf(original.SyscallError{}),
	"TempDir": original.TempDir,
	"Truncate": original.Truncate,
	"Unsetenv": original.Unsetenv,
	"UserCacheDir": original.UserCacheDir,
}
