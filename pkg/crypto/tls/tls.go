// Go version: go1.11.5

package tls

import "scrigo"
import "reflect"
import original "crypto/tls"

var Package = scrigo.Package{
	"Certificate": reflect.TypeOf(original.Certificate{}),
	"CertificateRequestInfo": reflect.TypeOf(original.CertificateRequestInfo{}),
	"Client": original.Client,
	"ClientAuthType": reflect.TypeOf(original.ClientAuthType(int(0))),
	"ClientHelloInfo": reflect.TypeOf(original.ClientHelloInfo{}),
	"ClientSessionCache": reflect.TypeOf((*original.ClientSessionCache)(nil)).Elem(),
	"ClientSessionState": reflect.TypeOf(original.ClientSessionState{}),
	"Config": reflect.TypeOf(original.Config{}),
	"Conn": reflect.TypeOf(original.Conn{}),
	"ConnectionState": reflect.TypeOf(original.ConnectionState{}),
	"CurveID": reflect.TypeOf(original.CurveID(uint16(0))),
	"CurveP256": scrigo.Constant(original.CurveP256, nil),
	"CurveP384": scrigo.Constant(original.CurveP384, nil),
	"CurveP521": scrigo.Constant(original.CurveP521, nil),
	"Dial": original.Dial,
	"DialWithDialer": original.DialWithDialer,
	"ECDSAWithP256AndSHA256": scrigo.Constant(original.ECDSAWithP256AndSHA256, nil),
	"ECDSAWithP384AndSHA384": scrigo.Constant(original.ECDSAWithP384AndSHA384, nil),
	"ECDSAWithP521AndSHA512": scrigo.Constant(original.ECDSAWithP521AndSHA512, nil),
	"ECDSAWithSHA1": scrigo.Constant(original.ECDSAWithSHA1, nil),
	"Listen": original.Listen,
	"LoadX509KeyPair": original.LoadX509KeyPair,
	"NewLRUClientSessionCache": original.NewLRUClientSessionCache,
	"NewListener": original.NewListener,
	"NoClientCert": scrigo.Constant(original.NoClientCert, nil),
	"PKCS1WithSHA1": scrigo.Constant(original.PKCS1WithSHA1, nil),
	"PKCS1WithSHA256": scrigo.Constant(original.PKCS1WithSHA256, nil),
	"PKCS1WithSHA384": scrigo.Constant(original.PKCS1WithSHA384, nil),
	"PKCS1WithSHA512": scrigo.Constant(original.PKCS1WithSHA512, nil),
	"PSSWithSHA256": scrigo.Constant(original.PSSWithSHA256, nil),
	"PSSWithSHA384": scrigo.Constant(original.PSSWithSHA384, nil),
	"PSSWithSHA512": scrigo.Constant(original.PSSWithSHA512, nil),
	"RecordHeaderError": reflect.TypeOf(original.RecordHeaderError{}),
	"RenegotiateFreelyAsClient": scrigo.Constant(original.RenegotiateFreelyAsClient, nil),
	"RenegotiateNever": scrigo.Constant(original.RenegotiateNever, nil),
	"RenegotiateOnceAsClient": scrigo.Constant(original.RenegotiateOnceAsClient, nil),
	"RenegotiationSupport": reflect.TypeOf(original.RenegotiationSupport(int(0))),
	"RequestClientCert": scrigo.Constant(original.RequestClientCert, nil),
	"RequireAndVerifyClientCert": scrigo.Constant(original.RequireAndVerifyClientCert, nil),
	"RequireAnyClientCert": scrigo.Constant(original.RequireAnyClientCert, nil),
	"Server": original.Server,
	"SignatureScheme": reflect.TypeOf(original.SignatureScheme(uint16(0))),
	"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA": scrigo.Constant(original.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, nil),
	"TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256": scrigo.Constant(original.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, nil),
	"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256": scrigo.Constant(original.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, nil),
	"TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA": scrigo.Constant(original.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, nil),
	"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384": scrigo.Constant(original.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, nil),
	"TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305": scrigo.Constant(original.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305, nil),
	"TLS_ECDHE_ECDSA_WITH_RC4_128_SHA": scrigo.Constant(original.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA, nil),
	"TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA": scrigo.Constant(original.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA, nil),
	"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA": scrigo.Constant(original.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, nil),
	"TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256": scrigo.Constant(original.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, nil),
	"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256": scrigo.Constant(original.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, nil),
	"TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA": scrigo.Constant(original.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, nil),
	"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384": scrigo.Constant(original.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, nil),
	"TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305": scrigo.Constant(original.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305, nil),
	"TLS_ECDHE_RSA_WITH_RC4_128_SHA": scrigo.Constant(original.TLS_ECDHE_RSA_WITH_RC4_128_SHA, nil),
	"TLS_FALLBACK_SCSV": scrigo.Constant(original.TLS_FALLBACK_SCSV, nil),
	"TLS_RSA_WITH_3DES_EDE_CBC_SHA": scrigo.Constant(original.TLS_RSA_WITH_3DES_EDE_CBC_SHA, nil),
	"TLS_RSA_WITH_AES_128_CBC_SHA": scrigo.Constant(original.TLS_RSA_WITH_AES_128_CBC_SHA, nil),
	"TLS_RSA_WITH_AES_128_CBC_SHA256": scrigo.Constant(original.TLS_RSA_WITH_AES_128_CBC_SHA256, nil),
	"TLS_RSA_WITH_AES_128_GCM_SHA256": scrigo.Constant(original.TLS_RSA_WITH_AES_128_GCM_SHA256, nil),
	"TLS_RSA_WITH_AES_256_CBC_SHA": scrigo.Constant(original.TLS_RSA_WITH_AES_256_CBC_SHA, nil),
	"TLS_RSA_WITH_AES_256_GCM_SHA384": scrigo.Constant(original.TLS_RSA_WITH_AES_256_GCM_SHA384, nil),
	"TLS_RSA_WITH_RC4_128_SHA": scrigo.Constant(original.TLS_RSA_WITH_RC4_128_SHA, nil),
	"VerifyClientCertIfGiven": scrigo.Constant(original.VerifyClientCertIfGiven, nil),
	"VersionSSL30": scrigo.Constant(original.VersionSSL30, nil),
	"VersionTLS10": scrigo.Constant(original.VersionTLS10, nil),
	"VersionTLS11": scrigo.Constant(original.VersionTLS11, nil),
	"VersionTLS12": scrigo.Constant(original.VersionTLS12, nil),
	"X25519": scrigo.Constant(original.X25519, nil),
	"X509KeyPair": original.X509KeyPair,
}
