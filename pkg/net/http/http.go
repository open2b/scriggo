// Go version: go1.11.5

package http

import original "net/http"
import "scrigo"
import "reflect"

var Package = scrigo.Package{
	"CanonicalHeaderKey": original.CanonicalHeaderKey,
	"Client": reflect.TypeOf(original.Client{}),
	"CloseNotifier": reflect.TypeOf((*original.CloseNotifier)(nil)).Elem(),
	"ConnState": reflect.TypeOf(original.ConnState(int(0))),
	"Cookie": reflect.TypeOf(original.Cookie{}),
	"CookieJar": reflect.TypeOf((*original.CookieJar)(nil)).Elem(),
	"DefaultClient": &original.DefaultClient,
	"DefaultServeMux": &original.DefaultServeMux,
	"DefaultTransport": &original.DefaultTransport,
	"DetectContentType": original.DetectContentType,
	"Dir": reflect.TypeOf(""),
	"ErrAbortHandler": &original.ErrAbortHandler,
	"ErrBodyNotAllowed": &original.ErrBodyNotAllowed,
	"ErrBodyReadAfterClose": &original.ErrBodyReadAfterClose,
	"ErrContentLength": &original.ErrContentLength,
	"ErrHandlerTimeout": &original.ErrHandlerTimeout,
	"ErrHeaderTooLong": &original.ErrHeaderTooLong,
	"ErrHijacked": &original.ErrHijacked,
	"ErrLineTooLong": &original.ErrLineTooLong,
	"ErrMissingBoundary": &original.ErrMissingBoundary,
	"ErrMissingContentLength": &original.ErrMissingContentLength,
	"ErrMissingFile": &original.ErrMissingFile,
	"ErrNoCookie": &original.ErrNoCookie,
	"ErrNoLocation": &original.ErrNoLocation,
	"ErrNotMultipart": &original.ErrNotMultipart,
	"ErrNotSupported": &original.ErrNotSupported,
	"ErrServerClosed": &original.ErrServerClosed,
	"ErrShortBody": &original.ErrShortBody,
	"ErrSkipAltProtocol": &original.ErrSkipAltProtocol,
	"ErrUnexpectedTrailer": &original.ErrUnexpectedTrailer,
	"ErrUseLastResponse": &original.ErrUseLastResponse,
	"ErrWriteAfterFlush": &original.ErrWriteAfterFlush,
	"Error": original.Error,
	"File": reflect.TypeOf((*original.File)(nil)).Elem(),
	"FileServer": original.FileServer,
	"FileSystem": reflect.TypeOf((*original.FileSystem)(nil)).Elem(),
	"Flusher": reflect.TypeOf((*original.Flusher)(nil)).Elem(),
	"Get": original.Get,
	"Handle": original.Handle,
	"HandleFunc": original.HandleFunc,
	"Handler": reflect.TypeOf((*original.Handler)(nil)).Elem(),
	"HandlerFunc": reflect.TypeOf((original.HandlerFunc)(nil)),
	"Head": original.Head,
	"Header": reflect.TypeOf((original.Header)(nil)),
	"Hijacker": reflect.TypeOf((*original.Hijacker)(nil)).Elem(),
	"ListenAndServe": original.ListenAndServe,
	"ListenAndServeTLS": original.ListenAndServeTLS,
	"LocalAddrContextKey": &original.LocalAddrContextKey,
	"MaxBytesReader": original.MaxBytesReader,
	"NewFileTransport": original.NewFileTransport,
	"NewRequest": original.NewRequest,
	"NewServeMux": original.NewServeMux,
	"NoBody": &original.NoBody,
	"NotFound": original.NotFound,
	"NotFoundHandler": original.NotFoundHandler,
	"ParseHTTPVersion": original.ParseHTTPVersion,
	"ParseTime": original.ParseTime,
	"Post": original.Post,
	"PostForm": original.PostForm,
	"ProtocolError": reflect.TypeOf(original.ProtocolError{}),
	"ProxyFromEnvironment": original.ProxyFromEnvironment,
	"ProxyURL": original.ProxyURL,
	"PushOptions": reflect.TypeOf(original.PushOptions{}),
	"Pusher": reflect.TypeOf((*original.Pusher)(nil)).Elem(),
	"ReadRequest": original.ReadRequest,
	"ReadResponse": original.ReadResponse,
	"Redirect": original.Redirect,
	"RedirectHandler": original.RedirectHandler,
	"Request": reflect.TypeOf(original.Request{}),
	"Response": reflect.TypeOf(original.Response{}),
	"ResponseWriter": reflect.TypeOf((*original.ResponseWriter)(nil)).Elem(),
	"RoundTripper": reflect.TypeOf((*original.RoundTripper)(nil)).Elem(),
	"SameSite": reflect.TypeOf(original.SameSite(int(0))),
	"Serve": original.Serve,
	"ServeContent": original.ServeContent,
	"ServeFile": original.ServeFile,
	"ServeMux": reflect.TypeOf(original.ServeMux{}),
	"ServeTLS": original.ServeTLS,
	"Server": reflect.TypeOf(original.Server{}),
	"ServerContextKey": &original.ServerContextKey,
	"SetCookie": original.SetCookie,
	"StatusText": original.StatusText,
	"StripPrefix": original.StripPrefix,
	"TimeoutHandler": original.TimeoutHandler,
	"Transport": reflect.TypeOf(original.Transport{}),
}
