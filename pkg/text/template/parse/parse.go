// Go version: go1.11.5

package parse

import "scrigo"
import "reflect"
import original "text/template/parse"

var Package = scrigo.Package{
	"ActionNode": reflect.TypeOf(original.ActionNode{}),
	"BoolNode": reflect.TypeOf(original.BoolNode{}),
	"BranchNode": reflect.TypeOf(original.BranchNode{}),
	"ChainNode": reflect.TypeOf(original.ChainNode{}),
	"CommandNode": reflect.TypeOf(original.CommandNode{}),
	"DotNode": reflect.TypeOf(original.DotNode{}),
	"FieldNode": reflect.TypeOf(original.FieldNode{}),
	"IdentifierNode": reflect.TypeOf(original.IdentifierNode{}),
	"IfNode": reflect.TypeOf(original.IfNode{}),
	"IsEmptyTree": original.IsEmptyTree,
	"ListNode": reflect.TypeOf(original.ListNode{}),
	"New": original.New,
	"NewIdentifier": original.NewIdentifier,
	"NilNode": reflect.TypeOf(original.NilNode{}),
	"Node": reflect.TypeOf((*original.Node)(nil)).Elem(),
	"NodeAction": scrigo.Constant(original.NodeAction, nil),
	"NodeBool": scrigo.Constant(original.NodeBool, nil),
	"NodeChain": scrigo.Constant(original.NodeChain, nil),
	"NodeCommand": scrigo.Constant(original.NodeCommand, nil),
	"NodeDot": scrigo.Constant(original.NodeDot, nil),
	"NodeField": scrigo.Constant(original.NodeField, nil),
	"NodeIdentifier": scrigo.Constant(original.NodeIdentifier, nil),
	"NodeIf": scrigo.Constant(original.NodeIf, nil),
	"NodeList": scrigo.Constant(original.NodeList, nil),
	"NodeNil": scrigo.Constant(original.NodeNil, nil),
	"NodeNumber": scrigo.Constant(original.NodeNumber, nil),
	"NodePipe": scrigo.Constant(original.NodePipe, nil),
	"NodeRange": scrigo.Constant(original.NodeRange, nil),
	"NodeString": scrigo.Constant(original.NodeString, nil),
	"NodeTemplate": scrigo.Constant(original.NodeTemplate, nil),
	"NodeText": scrigo.Constant(original.NodeText, nil),
	"NodeType": reflect.TypeOf(original.NodeType(int(0))),
	"NodeVariable": scrigo.Constant(original.NodeVariable, nil),
	"NodeWith": scrigo.Constant(original.NodeWith, nil),
	"NumberNode": reflect.TypeOf(original.NumberNode{}),
	"Parse": original.Parse,
	"PipeNode": reflect.TypeOf(original.PipeNode{}),
	"Pos": reflect.TypeOf(original.Pos(int(0))),
	"RangeNode": reflect.TypeOf(original.RangeNode{}),
	"StringNode": reflect.TypeOf(original.StringNode{}),
	"TemplateNode": reflect.TypeOf(original.TemplateNode{}),
	"TextNode": reflect.TypeOf(original.TextNode{}),
	"Tree": reflect.TypeOf(original.Tree{}),
	"VariableNode": reflect.TypeOf(original.VariableNode{}),
	"WithNode": reflect.TypeOf(original.WithNode{}),
}
