// Go version: go1.11.5

package types

import original "go/types"
import "scrigo"
import "reflect"

var Package = scrigo.Package{
	"Array": reflect.TypeOf(original.Array{}),
	"AssertableTo": original.AssertableTo,
	"AssignableTo": original.AssignableTo,
	"Basic": reflect.TypeOf(original.Basic{}),
	"BasicInfo": reflect.TypeOf(original.BasicInfo(int(0))),
	"BasicKind": reflect.TypeOf(original.BasicKind(int(0))),
	"Builtin": reflect.TypeOf(original.Builtin{}),
	"Chan": reflect.TypeOf(original.Chan{}),
	"ChanDir": reflect.TypeOf(original.ChanDir(int(0))),
	"Checker": reflect.TypeOf(original.Checker{}),
	"Comparable": original.Comparable,
	"Config": reflect.TypeOf(original.Config{}),
	"Const": reflect.TypeOf(original.Const{}),
	"ConvertibleTo": original.ConvertibleTo,
	"DefPredeclaredTestFuncs": original.DefPredeclaredTestFuncs,
	"Default": original.Default,
	"Error": reflect.TypeOf(original.Error{}),
	"Eval": original.Eval,
	"ExprString": original.ExprString,
	"Func": reflect.TypeOf(original.Func{}),
	"Id": original.Id,
	"Identical": original.Identical,
	"IdenticalIgnoreTags": original.IdenticalIgnoreTags,
	"Implements": original.Implements,
	"ImportMode": reflect.TypeOf(original.ImportMode(int(0))),
	"Importer": reflect.TypeOf((*original.Importer)(nil)).Elem(),
	"ImporterFrom": reflect.TypeOf((*original.ImporterFrom)(nil)).Elem(),
	"Info": reflect.TypeOf(original.Info{}),
	"Initializer": reflect.TypeOf(original.Initializer{}),
	"Interface": reflect.TypeOf(original.Interface{}),
	"IsInterface": original.IsInterface,
	"Label": reflect.TypeOf(original.Label{}),
	"LookupFieldOrMethod": original.LookupFieldOrMethod,
	"Map": reflect.TypeOf(original.Map{}),
	"MethodSet": reflect.TypeOf(original.MethodSet{}),
	"MissingMethod": original.MissingMethod,
	"Named": reflect.TypeOf(original.Named{}),
	"NewArray": original.NewArray,
	"NewChan": original.NewChan,
	"NewChecker": original.NewChecker,
	"NewConst": original.NewConst,
	"NewField": original.NewField,
	"NewFunc": original.NewFunc,
	"NewInterface": original.NewInterface,
	"NewInterfaceType": original.NewInterfaceType,
	"NewLabel": original.NewLabel,
	"NewMap": original.NewMap,
	"NewMethodSet": original.NewMethodSet,
	"NewNamed": original.NewNamed,
	"NewPackage": original.NewPackage,
	"NewParam": original.NewParam,
	"NewPkgName": original.NewPkgName,
	"NewPointer": original.NewPointer,
	"NewScope": original.NewScope,
	"NewSignature": original.NewSignature,
	"NewSlice": original.NewSlice,
	"NewStruct": original.NewStruct,
	"NewTuple": original.NewTuple,
	"NewTypeName": original.NewTypeName,
	"NewVar": original.NewVar,
	"Nil": reflect.TypeOf(original.Nil{}),
	"Object": reflect.TypeOf((*original.Object)(nil)).Elem(),
	"ObjectString": original.ObjectString,
	"Package": reflect.TypeOf(original.Package{}),
	"PkgName": reflect.TypeOf(original.PkgName{}),
	"Pointer": reflect.TypeOf(original.Pointer{}),
	"Qualifier": reflect.TypeOf((original.Qualifier)(nil)),
	"RelativeTo": original.RelativeTo,
	"Scope": reflect.TypeOf(original.Scope{}),
	"Selection": reflect.TypeOf(original.Selection{}),
	"SelectionKind": reflect.TypeOf(original.SelectionKind(int(0))),
	"SelectionString": original.SelectionString,
	"Signature": reflect.TypeOf(original.Signature{}),
	"Sizes": reflect.TypeOf((*original.Sizes)(nil)).Elem(),
	"SizesFor": original.SizesFor,
	"Slice": reflect.TypeOf(original.Slice{}),
	"StdSizes": reflect.TypeOf(original.StdSizes{}),
	"Struct": reflect.TypeOf(original.Struct{}),
	"Tuple": reflect.TypeOf(original.Tuple{}),
	"Typ": &original.Typ,
	"Type": reflect.TypeOf((*original.Type)(nil)).Elem(),
	"TypeAndValue": reflect.TypeOf(original.TypeAndValue{}),
	"TypeName": reflect.TypeOf(original.TypeName{}),
	"TypeString": original.TypeString,
	"Universe": &original.Universe,
	"Unsafe": &original.Unsafe,
	"Var": reflect.TypeOf(original.Var{}),
	"WriteExpr": original.WriteExpr,
	"WriteSignature": original.WriteSignature,
	"WriteType": original.WriteType,
}
