// Copyright (c) 2019 Open2b Software Snc. All rights reserved.
// https://www.open2b.com

// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package scrigo

import (
	"os"
	"reflect"
)

var _os = Package{
	"Args":              &os.Args,
	"Chdir":             os.Chdir,
	"Chmod":             os.Chmod,
	"Chown":             os.Chown,
	"Chtimes":           os.Chtimes,
	"Clearenv":          os.Clearenv,
	"Create":            os.Create,
	"DevNull":           Constant(os.DevNull, nil),
	"Environ":           os.Environ,
	"ErrClosed":         &os.ErrClosed,
	"ErrExist":          &os.ErrExist,
	"ErrInvalid":        &os.ErrInvalid,
	"ErrNoDeadline":     &os.ErrNoDeadline,
	"ErrNotExist":       &os.ErrNotExist,
	"ErrPermission":     &os.ErrPermission,
	"Executable":        os.Executable,
	"Exit":              os.Exit,
	"Expand":            os.Expand,
	"ExpandEnv":         os.ExpandEnv,
	"File":              reflect.TypeOf(os.File{}),
	"FileInfo":          reflect.TypeOf((*os.FileInfo)(nil)).Elem(),
	"FileMode":          reflect.TypeOf(os.FileMode(uint32(0))),
	"FindProcess":       os.FindProcess,
	"Getegid":           os.Getegid,
	"Getenv":            os.Getenv,
	"Geteuid":           os.Geteuid,
	"Getgid":            os.Getgid,
	"Getgroups":         os.Getgroups,
	"Getpagesize":       os.Getpagesize,
	"Getpid":            os.Getpid,
	"Getppid":           os.Getppid,
	"Getuid":            os.Getuid,
	"Getwd":             os.Getwd,
	"Hostname":          os.Hostname,
	"Interrupt":         &os.Interrupt,
	"IsExist":           os.IsExist,
	"IsNotExist":        os.IsNotExist,
	"IsPathSeparator":   os.IsPathSeparator,
	"IsPermission":      os.IsPermission,
	"IsTimeout":         os.IsTimeout,
	"Kill":              &os.Kill,
	"Lchown":            os.Lchown,
	"Link":              os.Link,
	"LinkError":         reflect.TypeOf(os.LinkError{}),
	"LookupEnv":         os.LookupEnv,
	"Lstat":             os.Lstat,
	"Mkdir":             os.Mkdir,
	"MkdirAll":          os.MkdirAll,
	"ModeAppend":        Constant(os.ModeAppend, nil),
	"ModeCharDevice":    Constant(os.ModeCharDevice, nil),
	"ModeDevice":        Constant(os.ModeDevice, nil),
	"ModeDir":           Constant(os.ModeDir, nil),
	"ModeExclusive":     Constant(os.ModeExclusive, nil),
	"ModeIrregular":     Constant(os.ModeIrregular, nil),
	"ModeNamedPipe":     Constant(os.ModeNamedPipe, nil),
	"ModePerm":          Constant(os.ModePerm, nil),
	"ModeSetgid":        Constant(os.ModeSetgid, nil),
	"ModeSetuid":        Constant(os.ModeSetuid, nil),
	"ModeSocket":        Constant(os.ModeSocket, nil),
	"ModeSticky":        Constant(os.ModeSticky, nil),
	"ModeSymlink":       Constant(os.ModeSymlink, nil),
	"ModeTemporary":     Constant(os.ModeTemporary, nil),
	"ModeType":          Constant(os.ModeType, nil),
	"NewFile":           os.NewFile,
	"NewSyscallError":   os.NewSyscallError,
	"O_APPEND":          Constant(os.O_APPEND, nil),
	"O_CREATE":          Constant(os.O_CREATE, nil),
	"O_EXCL":            Constant(os.O_EXCL, nil),
	"O_RDONLY":          Constant(os.O_RDONLY, nil),
	"O_RDWR":            Constant(os.O_RDWR, nil),
	"O_SYNC":            Constant(os.O_SYNC, nil),
	"O_TRUNC":           Constant(os.O_TRUNC, nil),
	"O_WRONLY":          Constant(os.O_WRONLY, nil),
	"Open":              os.Open,
	"OpenFile":          os.OpenFile,
	"PathError":         reflect.TypeOf(os.PathError{}),
	"PathListSeparator": Constant(os.PathListSeparator, nil),
	"PathSeparator":     Constant(os.PathSeparator, nil),
	"Pipe":              os.Pipe,
	"ProcAttr":          reflect.TypeOf(os.ProcAttr{}),
	"Process":           reflect.TypeOf(os.Process{}),
	"ProcessState":      reflect.TypeOf(os.ProcessState{}),
	"Readlink":          os.Readlink,
	"Remove":            os.Remove,
	"RemoveAll":         os.RemoveAll,
	"Rename":            os.Rename,
	"SEEK_CUR":          Constant(os.SEEK_CUR, nil),
	"SEEK_END":          Constant(os.SEEK_END, nil),
	"SEEK_SET":          Constant(os.SEEK_SET, nil),
	"SameFile":          os.SameFile,
	"Setenv":            os.Setenv,
	"Signal":            reflect.TypeOf((*os.Signal)(nil)).Elem(),
	"StartProcess":      os.StartProcess,
	"Stat":              os.Stat,
	"Stderr":            &os.Stderr,
	"Stdin":             &os.Stdin,
	"Stdout":            &os.Stdout,
	"Symlink":           os.Symlink,
	"SyscallError":      reflect.TypeOf(os.SyscallError{}),
	"TempDir":           os.TempDir,
	"Truncate":          os.Truncate,
	"Unsetenv":          os.Unsetenv,
	"UserCacheDir":      os.UserCacheDir,
}
